// Generated by CoffeeScript 1.3.3
(function() {
  var Ubret;

  if (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {
    Ubret = {
      Map: require('./ubret/map'),
      Statistics: require('./ubret/statistics'),
      SubjectViewer: require('./ubret/subject_viewer'),
      Table: require('./ubret/table')
    };
    module.exports = Ubret;
  } else {
    window.Ubret = new Object;
  }

}).call(this);
// Generated by CoffeeScript 1.3.3
(function() {
  var BaseTool,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  BaseTool = (function() {

    BaseTool.prototype.required_opts = ['data'];

    function BaseTool(opts) {
      this.selectKey = __bind(this.selectKey, this);

      this.selectElement = __bind(this.selectElement, this);

      this.uglifyKey = __bind(this.uglifyKey, this);

      this.prettyKey = __bind(this.prettyKey, this);

      this.getTemplate = __bind(this.getTemplate, this);
      if (!_.has(opts, 'data')) {
        throw 'must provide data';
      } else {
        this.data = opts.data;
      }
      if (!_.has(opts, 'selector')) {
        throw 'must provide selector';
      } else {
        this.selector = opts.selector;
      }
      if (!_.has(opts, 'keys')) {
        throw 'must provide keys';
      } else {
        this.keys = opts.keys;
      }
      if (!_.has(opts, 'el')) {
        throw 'must provde el';
      } else {
        this.el = opts.el;
      }
      this.selectElementCb = opts.selectElementCb || function() {};
      this.selectKeyCb = opts.selectKeyCb || function() {};
      this.selectedElement = opts.selectedElement || null;
      this.selectedKey = opts.selectedKey || 'id';
    }

    BaseTool.prototype.getTemplate = function() {
      return this.template;
    };

    BaseTool.prototype.prettyKey = function(key) {
      return this.capitalizeWords(this.underscoresToSpaces(key));
    };

    BaseTool.prototype.uglifyKey = function(key) {
      return this.spacesToUnderscores(this.lowercaseWords(key));
    };

    BaseTool.prototype.selectElement = function(id) {
      this.selectedElement = id;
      this.selectElementCb(id);
      return this.start();
    };

    BaseTool.prototype.selectKey = function(key) {
      this.selectedKey = key;
      this.selectKeyCb(key);
      return this.start();
    };

    BaseTool.prototype.underscoresToSpaces = function(string) {
      return string.replace(/_/g, " ");
    };

    BaseTool.prototype.capitalizeWords = function(string) {
      return string.replace(/(\b[a-z])/g, function(char) {
        return char.toUpperCase();
      });
    };

    BaseTool.prototype.spacesToUnderscores = function(string) {
      return string.replace(/\s/g, "_");
    };

    BaseTool.prototype.lowercaseWords = function(string) {
      return string.replace(/(\b[A-Z])/g, function(char) {
        return char.toLowerCase();
      });
    };

    return BaseTool;

  })();

  if (typeof require === 'function' && typeof module === 'object' && typeof exports === 'object') {
    module.exports = BaseTool;
  } else {
    window.Ubret['BaseTool'] = BaseTool;
  }

}).call(this);
// Generated by CoffeeScript 1.3.3
(function() {
  var BaseTool, Histogram,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  try {
    BaseTool = require('./base_tool');
  } catch (error) {
    BaseTool = window.Ubret.BaseTool;
  }

  Histogram = (function(_super) {

    __extends(Histogram, _super);

    Histogram.prototype.template = "<div class=\"histogram\">\n  <div id=\"<%- selector %>\">\n    <svg></svg>\n  </div>\n</div>";

    function Histogram(opts) {
      this.start = __bind(this.start, this);

      this.drawBars = __bind(this.drawBars, this);

      this.createGraph = __bind(this.createGraph, this);

      var compiled;
      Histogram.__super__.constructor.call(this, opts);
      compiled = _.template(this.template, {
        selector: this.selector
      });
      this.el.html(compiled);
      this.height = opts.height || 480;
      this.width = opts.width || 640;
      this.margin = opts.margin || {
        left: 60,
        top: 20,
        bottom: 60,
        right: 40
      };
      this.format = opts.format ? d3.format(opts.format) : d3.format(',.02f');
      this.color = opts.color || 'teal';
      this.selectionColor = opts.selectionColor || 'orange';
      this.yLabel = opts.yLabel || 'Number';
      this.createGraph();
    }

    Histogram.prototype.createGraph = function() {
      var bin, binFunction, binRanges, bins, data, lastBin, lastTick, selectedBin, selectedData, ticks, unselectedBin, unselectedData, xAxis, xDomain, yAxis, yDomain, _i, _len,
        _this = this;
      this.selectedKey = 'dec';
      this.selectedData = [];
      if (typeof this.selectedKey === 'undefined') {
        return;
      }
      this.el.find('svg').empty();
      this.graphWidth = this.width - this.margin.left - this.margin.right;
      this.graphHeight = this.height - this.margin.top - this.margin.bottom;
      this.formatCount = d3.format(',.0f');
      this.svg = d3.select("" + this.selector + " svg").attr('width', this.width).attr('height', this.height).append('g').attr('transform', "translate(" + this.margin.left + ", " + this.margin.top + ")");
      if (this.data.length > 1) {
        data = _.map(this.data, function(d) {
          return d[_this.selectedKey];
        });
        data = _.filter(data, function(d) {
          return d !== null;
        });
        if (this.binNumber != null) {
          bins = d3.layout.histogram().bins(this.binNumber)(data);
        } else {
          bins = d3.layout.histogram()(data);
        }
        xDomain = d3.extent(this.data, function(d) {
          return parseFloat(d[_this.selectedKey]);
        });
        yDomain = [
          0, d3.max(bins, function(d) {
            return d.y;
          })
        ];
      } else if (this.data.length === 1) {
        svg.append('text').attr('class', 'data-warning').attr('y', graphHeight / 2).attr('x', graphWidth / 2).attr('text-anchor', 'middle').text('Not Enough Data, Classify More Galaxies!');
        return;
      } else {
        bins = [];
        xDomain = [0, 1];
        yDomain = [0, 1];
      }
      if (this.selectedData.length !== 0) {
        binRanges = _.map(bins, function(d) {
          return d.x;
        });
        binFunction = d3.layout.histogram().bins(binRanges);
        unselectedData = _.filter(this.filteredData, function(d) {
          return !(__indexOf.call(_this.selectedData, d) >= 0);
        });
        selectedData = _.map(this.selectedData, function(d) {
          return d[_this.selectedKey];
        });
        unselectedData = _.map(unselectedData, function(d) {
          return d[_this.selectedKey];
        });
        unselectedBin = binFunction(unselectedData);
        selectedBin = binFunction(selectedData);
        yDomain = [
          0, d3.max([
            d3.max(unselectedBin, function(d) {
              return d.y;
            }), d3.max(selectedBin, function(d) {
              return d.y;
            })
          ])
        ];
      }
      this.x = d3.scale.linear().domain(xDomain).range([0, this.graphWidth]);
      this.y = d3.scale.linear().domain(yDomain).range([this.graphHeight, 0]);
      xAxis = d3.svg.axis().scale(this.x).orient('bottom');
      if (bins.length !== 0) {
        ticks = new Array;
        for (_i = 0, _len = bins.length; _i < _len; _i++) {
          bin = bins[_i];
          ticks.push(bin.x);
        }
        lastBin = _.last(bins);
        lastTick = lastBin.x + lastBin.dx;
        ticks.push(lastTick);
      } else {
        ticks = [0, 0.25, 0.5, 0.75, 1];
      }
      xAxis.tickValues(ticks);
      xAxis.tickFormat(this.format);
      yAxis = d3.svg.axis().scale(this.y).orient('left').tickFormat(function(tick) {
        if (Math.floor(tick) !== tick) {
          return;
        }
        return tick;
      });
      this.svg.append('g').attr('class', 'x axis').attr('transform', "translate(0, " + this.graphHeight + ")").call(xAxis);
      this.svg.append('g').attr('class', 'y axis').attr('transform', "translate(0, 0)").call(yAxis);
      this.svg.append('text').attr('class', 'x label').attr('text-anchor', 'middle').attr('x', this.graphWidth / 2).attr('y', this.graphHeight + 35).text(this.prettyKey(this.selectedKey));
      this.svg.append('text').attr('class', 'y label').attr('text-anchor', 'middle').attr('y', -40).attr('x', -(this.graphHeight / 2)).attr('transform', "rotate(-90)").text(this.yLabel);
      if (bins.length !== 0) {
        if (this.selectedData.length !== 0) {
          if (unselectedData.length > 1) {
            this.drawBars(unselectedBin, this.color, true);
          }
          if (selectedData.length > 1) {
            return this.drawBars(selectedBin, this.selectionColor, true, true);
          }
        } else {
          return this.drawBars(bins, this.color);
        }
      }
    };

    Histogram.prototype.drawBars = function(bins, color, halfSize, offset) {
      var bar, width, witth,
        _this = this;
      if (halfSize == null) {
        halfSize = false;
      }
      if (offset == null) {
        offset = false;
      }
      width = this.x(bins[1].x) - this.x(bins[0].x);
      width = halfSize ? (width / 2) - 1 : width - 2;
      witth = offset ? width - 1 : width;
      bar = this.svg.selectAll(".bar-" + color).data(bins).enter().append('g').attr('class', 'bar').attr('transform', function(d) {
        if (offset) {
          return "translate(" + (_this.x(d.x) + width + 1) + ", " + (_this.y(d.y) - 1) + ")";
        } else {
          return "translate(" + (_this.x(d.x)) + ", " + (_this.y(d.y) - 1) + ")";
        }
      });
      bar.append('rect').attr('x', 1).attr('width', Math.floor(width)).attr('height', function(d) {
        return _this.graphHeight - _this.y(d.y);
      }).attr('fill', color);
      return bar.append('text').attr("dy", ".75em").attr("y", 6).attr("x", width / 2).attr("text-anchor", "middle").text(function(d) {
        return _this.formatCount(d.y);
      });
    };

    Histogram.prototype.start = function() {
      Histogram.__super__.start.apply(this, arguments);
      return this.createGraph();
    };

    return Histogram;

  })(BaseTool);

  if (typeof require === 'function' && typeof module === 'object' && typeof exports === 'object') {
    module.exports = Histogram;
  } else {
    window.Ubret['Histogram'] = Histogram;
  }

}).call(this);
// Generated by CoffeeScript 1.3.3
(function() {
  var BaseTool, Scatterplot,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  try {
    BaseTool = require('./base_tool');
  } catch (error) {
    BaseTool = window.Ubret.BaseTool;
  }

  Scatterplot = (function(_super) {

    __extends(Scatterplot, _super);

    Scatterplot.prototype.attributes = {
      currentSubject: {
        name: 'currentSubject'
      }
    };

    Scatterplot.prototype.template = "<div id=\"<%- @channel %>\">\n  <svg></svg>\n</div>";

    function Scatterplot() {
      this.start = __bind(this.start, this);

      this.setYVar = __bind(this.setYVar, this);

      this.setXVar = __bind(this.setXVar, this);

      this.calculateTicks = __bind(this.calculateTicks, this);

      this.drawPoints = __bind(this.drawPoints, this);

      this.drawAxes = __bind(this.drawAxes, this);

      this.createGraph = __bind(this.createGraph, this);

      this.dataToCoordinates = __bind(this.dataToCoordinates, this);

      this.select = __bind(this.select, this);

      this.sendSelection = __bind(this.sendSelection, this);

      this.removeTooltip = __bind(this.removeTooltip, this);

      this.displayTooltip = __bind(this.displayTooltip, this);

      this.render = __bind(this.render, this);
      Scatterplot.__super__.constructor.apply(this, arguments);
      this.height = this.height || 480;
      this.width = this.width || 640;
      this.margin = this.margin || {
        left: 40,
        top: 20,
        bottom: 40
      };
      this.color = this.color || 'teal';
      this.selectionColor = this.selectionColor || 'orange';
      this.xFormat = this.xFormat || d3.format(',.02f');
      this.yFormat = this.yFormat || d3.format(',.02f');
    }

    Scatterplot.prototype.render = function() {
      var compiled;
      compiled = _.template(this.template, this.channel);
      return this.tool_view.html(compiled);
    };

    Scatterplot.prototype.displayTooltip = function(d, i) {
      var left, tooltip, top, xAxis, xAxisVal, yAxis, yAxisVal;
      xAxis = this.prettyKey(this.xAxisKey);
      yAxis = this.prettyKey(this.yAxisKey);
      xAxisVal = this.xFormat(d.x);
      yAxisVal = this.yFormat(d.y);
      top = d3.event.pageY - 50;
      left = d3.event.pageX;
      this.sendSelection(i);
      tooltip = require('../views/scatterplot_tooltip')({
        xAxis: xAxis,
        yAxis: yAxis,
        xAxisVal: xAxisVal,
        yAxisVal: yAxisVal
      });
      this.append(tooltip);
      return this.el.find('.tooltip').offset({
        top: top,
        left: left
      });
    };

    Scatterplot.prototype.removeTooltip = function(d, i) {
      return this.el.find('.tooltip').remove();
    };

    Scatterplot.prototype.sendSelection = function(index) {
      var selectedItem;
      selectedItem = this.filteredData[index];
      return this.publish([
        {
          message: "selected",
          item_id: selectedItem.zooniverse_id
        }
      ]);
    };

    Scatterplot.prototype.select = function(itemId) {
      return _.indexOf(this.filteredData(itemId));
    };

    Scatterplot.prototype.dataToCoordinates = function(d) {
      var coordinate;
      coordinate = {
        x: d[this.xAxisKey],
        y: d[this.yAxisKey],
        classification: d['classification']
      };
      if (this.selectedData.length !== 0 && __indexOf.call(this.selectedData, d) >= 0) {
        coordinate['color'] = this.selectionColor;
      } else {
        coordinate['color'] = this.color;
      }
      return coordinate;
    };

    Scatterplot.prototype.createGraph = function() {
      var graphData;
      if ((typeof this.xAxisKey === 'undefined') && (typeof this.yAxixKey === 'undefined')) {
        return;
      }
      this.el.find('svg').empty();
      this.graphWidth = this.width - this.margin.left;
      this.graphHeight = this.height - this.margin.top - this.margin.bottom;
      this.svg = d3.select("#" + this.channel + " svg").attr('width', this.width).attr('height', this.height).append('g').attr('transform', "translate(" + this.margin.left + ", " + this.margin.top + ")");
      graphData = this.drawAxes();
      return this.drawPoints(graphData, this.color);
    };

    Scatterplot.prototype.drawAxes = function() {
      var data, xAxis, xDomain, yAxis, yDomain;
      if (this.filteredData.length !== 0) {
        data = _.map(this.filteredData, this.dataToCoordinates);
        xDomain = d3.extent(data, function(d) {
          return d.x;
        });
        yDomain = d3.extent(data, function(d) {
          return d.y;
        });
      } else {
        data = [];
        xDomain = [0, 10];
        yDomain = [0, 10];
      }
      if (typeof this.xAxisKey !== 'undefined') {
        this.x = d3.scale.linear().domain(xDomain).range([0, this.graphWidth]);
        xAxis = d3.svg.axis().scale(this.x).orient('bottom').tickFormat(this.xFormat);
        if (data.length !== 0) {
          xAxis.tickValues(this.calculateTicks(this.x));
        }
        this.svg.append('g').attr('class', 'x axis').attr('transform', "translate(0, " + this.graphHeight + ")").call(xAxis);
        this.svg.append('text').attr('class', 'x label').attr('text-anchor', 'middle').attr('x', this.graphWidth / 2).attr('y', this.graphHeight + 30).text(this.prettyKey(this.xAxisKey));
      }
      if (typeof this.yAxisKey !== 'undefined') {
        this.y = d3.scale.linear().domain(yDomain).range([this.graphHeight, 0]);
        yAxis = d3.svg.axis().scale(this.y).orient('left').tickFormat(this.yFormat);
        if (data.length !== 0) {
          yAxis.tickValues(this.calculateTicks(this.y));
        }
        this.svg.append('g').attr('class', 'y axis').attr('transform', 'translate(0, 0)').call(yAxis);
        this.svg.append('text').attr('class', 'y label').attr('text-anchor', 'middle').attr('y', -40).attr('x', -(this.graphHeight / 2)).attr('transform', "rotate(-90)").text(this.prettyKey(this.yAxisKey));
      }
      return data;
    };

    Scatterplot.prototype.drawPoints = function(data) {
      var point,
        _this = this;
      if (data.length !== 0) {
        point = this.svg.selectAll('.point').data(data).enter().append('g').attr('class', 'point').attr('transform', function(d) {
          if ((d.x === null) || (d.y === null)) {

          } else {
            return "translate(" + (_this.x(d.x)) + ", " + (_this.y(d.y)) + ")";
          }
        }).on('mouseover', this.displayTooltip).on('mouseout', this.removeTooltip);
        return point.append('circle').attr('r', 3).attr('id', function(d) {
          return d.x;
        }).attr('fill', function(d) {
          return d.color;
        });
      }
    };

    Scatterplot.prototype.calculateTicks = function(axis) {
      var max, min, numTicks, tick, tickWidth, ticks;
      min = _.first(axis.domain());
      max = _.last(axis.domain());
      ticks = [min, max];
      numTicks = Math.floor(this.graphWidth / 50);
      tickWidth = (max - min) / numTicks;
      tick = min + tickWidth;
      while (tick < max) {
        ticks.push(tick);
        tick = tick + tickWidth;
      }
      return ticks;
    };

    Scatterplot.prototype.setXVar = function(variable) {
      this.xAxisKey = variable;
      return this.createGraph();
    };

    Scatterplot.prototype.setYVar = function(variable) {
      this.yAxisKey = variable;
      return this.createGraph();
    };

    Scatterplot.prototype.start = function() {
      return this.createGraph();
    };

    return Scatterplot;

  })(BaseTool);

  if (typeof require === 'function' && typeof module === 'object' && typeof exports === 'object') {
    module.exports = Scatterplot;
  } else {
    window.Ubret['Scatterplot'] = Scatterplot;
  }

}).call(this);
// Generated by CoffeeScript 1.3.3
(function() {
  var BaseTool, Spectra,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  try {
    BaseTool = require('./base_tool');
  } catch (error) {
    BaseTool = window.Ubret.BaseTool;
  }

  Spectra = (function(_super) {

    __extends(Spectra, _super);

    Spectra.prototype.name = "Spectra";

    Spectra.prototype.template = "<div id=\"spectra-<%- @index %>\"></div>";

    function Spectra() {
      this.plot = __bind(this.plot, this);

      this.zoom = __bind(this.zoom, this);

      this.render = __bind(this.render, this);
      Spectra.__super__.constructor.apply(this, arguments);
    }

    Spectra.prototype.render = function() {
      var compiled;
      compiled = _.template(this.template, this.index);
      return this.tool_view.html(compiled);
    };

    Spectra.prototype.zoom = function() {
      this.svg.select(".x.axis").call(this.xAxis);
      this.svg.select(".y.axis").call(this.yAxis);
      this.svg.select("path.fluxes").attr("d", this.fluxLine);
      return this.svg.select("path.best-fit").attr("d", this.bestFitLine);
    };

    Spectra.prototype.plot = function() {
      var bestFit, fluxes, height, margin, name, spectralLines, wavelength, wavelengths, width, x, y, _results,
        _this = this;
      wavelengths = this.data[0].wavelengths;
      fluxes = this.data[0].flux;
      bestFit = this.data[0].best_fit;
      spectralLines = this.data[0].spectralLines;
      margin = {
        top: 14,
        right: 10,
        bottom: 14,
        left: 40
      };
      width = 370 - margin.left - margin.right;
      height = 200 - margin.top - margin.bottom;
      x = d3.scale.linear().range([0, width]).domain(d3.extent(wavelengths));
      y = d3.scale.linear().range([0, height]).domain(d3.extent(fluxes));
      x.ticks(8);
      this.xAxis = d3.svg.axis().scale(x).orient("bottom");
      this.yAxis = d3.svg.axis().scale(y).orient("left");
      this.fluxLine = d3.svg.line().x(function(d, i) {
        return x(wavelengths[i]);
      }).y(function(d, i) {
        return y(d);
      });
      this.bestFitLine = d3.svg.line().x(function(d, i) {
        return x(wavelengths[i]);
      }).y(function(d, i) {
        return y(d);
      });
      this.svg = d3.select("#spectra-" + this.index).append('svg').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', "translate(" + margin.left + ", " + margin.top + ")").call(d3.behavior.zoom().x(x).y(y).scaleExtent([1, 8]).on("zoom", this.zoom));
      this.svg.append("g").attr("class", "x axis").attr("transform", "translate(0, " + height + ")").call(this.xAxis);
      this.svg.append("g").attr("class", "y axis").call(this.yAxis).append("text").attr("transform", "rotate(-90)").attr("y", 6).attr("dy", ".71em").style("text-anchor", "end").text("Flux (1E-17 erg/cm^2/s/Ang)");
      this.svg.append("path").datum(fluxes).attr("class", "line fluxes").attr("d", this.fluxLine);
      this.svg.append("path").datum(bestFit).attr("class", "line best-fit").attr("d", this.bestFitLine);
      _results = [];
      for (name in spectralLines) {
        wavelength = spectralLines[name];
        _results.push(this.svg.append("line").attr("x1", x(wavelength)).attr("x2", x(wavelength)).attr("y1", 0).attr("y2", height).style("stroke", "rgb(255,0,0)").style("stroke-width", 0.5));
      }
      return _results;
    };

    return Spectra;

  })(BaseTool);

  if (typeof require === 'function' && typeof module === 'object' && typeof exports === 'object') {
    module.exports = Spectra;
  } else {
    window.Ubret['Spectra'] = Spectra;
  }

}).call(this);
// Generated by CoffeeScript 1.3.3
(function() {
  var BaseTool, Statistics,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  try {
    BaseTool = require('./base_tool');
  } catch (error) {
    BaseTool = window.Ubret.BaseTool;
  }

  Statistics = (function(_super) {

    __extends(Statistics, _super);

    Statistics.prototype.attributes = {
      currentKey: {
        name: 'currentKey',
        events: [
          {
            'selector': 'change .key',
            'callback': 'selectKey',
            'action': 'change'
          }
        ]
      }
    };

    Statistics.prototype.template = "<div class=\"stats\">\n  <ul>\n    <% _.each(stats, function(stat) { %>\n      <li>\n        <label><%= stat.label %></label>\n        <% if(stat.view) { %>\n          <%= stat.view %>\n        <% } else { %>\n          <%= stat.value %>\n        <% } %>\n      </li>\n    <% }); %>\n  </ul>\n</div>";

    function Statistics(opts) {
      this.getKurtosis = __bind(this.getKurtosis, this);

      this.getSkew = __bind(this.getSkew, this);

      this.getPercentile = __bind(this.getPercentile, this);

      this.getStandardDeviation = __bind(this.getStandardDeviation, this);

      this.getVariance = __bind(this.getVariance, this);

      this.getMax = __bind(this.getMax, this);

      this.getMin = __bind(this.getMin, this);

      this.getMode = __bind(this.getMode, this);

      this.getMedian = __bind(this.getMedian, this);

      this.getMean = __bind(this.getMean, this);

      this.selectKey = __bind(this.selectKey, this);

      this.changeSelectedKey = __bind(this.changeSelectedKey, this);

      this.start = __bind(this.start, this);
      Statistics.__super__.constructor.call(this, opts);
      this.selectKey(this.keys[0]);
      this.start();
    }

    Statistics.prototype.start = function() {
      var compiled, data;
      data = _.pluck(this.data, this.currentKey);
      this.stats = [];
      if (_.any(data, (function(datum) {
        return _.isNaN(parseFloat(datum));
      }))) {

      } else {
        data = _.map(data, function(num) {
          return parseFloat(num);
        });
      }
      this.stats.push(this.getMean(data));
      this.stats.push(this.getMedian(data));
      this.stats.push(this.getMode(data));
      this.stats.push(this.getMin(data));
      this.stats.push(this.getMax(data));
      this.stats.push(this.getVariance(data));
      this.stats.push(this.getStandardDeviation(data));
      this.stats.push(this.getSkew(data));
      this.stats.push(this.getKurtosis(data));
      compiled = _.template(this.template, {
        stats: this.stats
      });
      return this.el.html(compiled);
    };

    Statistics.prototype.changeSelectedKey = function(e) {
      this.currentKey = $(e.currentTarget).val();
      return this.start();
    };

    Statistics.prototype.selectKey = function(key) {
      this.currentKey = key;
      return this.currentKey;
    };

    Statistics.prototype.getMean = function(data) {
      var average, average_object;
      average = _.reduce(data, (function(memo, num) {
        return memo + num;
      })) / data.length;
      return average_object = {
        'label': 'Mean',
        'value': average
      };
    };

    Statistics.prototype.getMedian = function(data) {
      var median, median_object, mid_point;
      data = _.sortBy(data, function(num) {
        return num;
      });
      mid_point = data.length / 2;
      if (mid_point % 1) {
        median = (data[Math.floor(mid_point)] + data[Math.ceil(mid_point)]) / 2;
      } else {
        median = data[data.length / 2];
      }
      return median_object = {
        'label': 'Median',
        'value': median
      };
    };

    Statistics.prototype.getMode = function(data) {
      var key, keys, mode, mode_data, mode_object, _i, _len;
      data = _.groupBy(data, function(datum) {
        return datum;
      });
      keys = _.keys(data);
      mode_data = [];
      for (_i = 0, _len = keys.length; _i < _len; _i++) {
        key = keys[_i];
        mode_data.push({
          'key': key,
          'num': data[key].length
        });
      }
      mode = _.max(mode_data, function(datum) {
        return datum.num;
      });
      return mode_object = {
        'label': 'Mode',
        'value': mode.key
      };
    };

    Statistics.prototype.getMin = function(data) {
      var min_object;
      return min_object = {
        'label': 'Minimum',
        'value': _.min(data)
      };
    };

    Statistics.prototype.getMax = function(data) {
      var max_object;
      return max_object = {
        'label': 'Maximum',
        'value': _.max(data)
      };
    };

    Statistics.prototype.getVariance = function(data) {
      var data_count, mean, variance, variance_data, variance_object;
      data_count = data.length;
      mean = this.getMean(data);
      data = _.map(data, function(datum) {
        return Math.pow(Math.abs(datum - mean.value), 2);
      });
      variance_data = _.reduce(data, function(memo, datum) {
        return memo + datum;
      });
      variance = variance_data / data_count;
      return variance_object = {
        'label': 'Variance',
        'value': variance
      };
    };

    Statistics.prototype.getStandardDeviation = function(data) {
      var standard_deviation, standard_deviation_object, variance;
      variance = (this.getVariance(data)).value;
      standard_deviation = Math.sqrt(variance);
      return standard_deviation_object = {
        'label': 'Standard Deviation',
        'value': standard_deviation
      };
    };

    Statistics.prototype.getPercentile = function(data) {
      var i, percent, percentile, percentile_data, percentile_object, percentile_view, value_object, _i;
      data = _.sortBy(data, function(datum) {
        return datum;
      });
      percentile_data = [];
      for (i = _i = 1; _i <= 10; i = ++_i) {
        percent = i / 10;
        percentile = data[Math.floor((data.length * percent) - 1)];
        value_object = {
          'label': (percent * 100) + 'th',
          'value': percentile
        };
        percentile_data.push(value_object);
      }
      percentile_view = "<ul>\n  <% for set, i in @data: %>\n    <li><%- set.label %>: <%- set.value %></li>\n  <% end %>\n</ul>";
      return percentile_object = {
        'label': 'Percentile',
        'value': percentile_data,
        'view': _.template(percentile_view, {
          data: percentile_data
        })
      };
    };

    Statistics.prototype.getSkew = function(data) {
      var denom, mean, skew, skew_object, standard_deviation, sum;
      mean = (this.getMean(data)).value;
      standard_deviation = (this.getStandardDeviation(data)).value;
      sum = _.reduce(data, (function(memo, datum) {
        return Math.pow(datum - mean, 3) + memo;
      }), 0);
      denom = data.length * Math.pow(standard_deviation, 3);
      skew = sum / denom;
      return skew_object = {
        'label': 'Skew',
        'value': skew
      };
    };

    Statistics.prototype.getKurtosis = function(data) {
      var denom, kurtosis, kurtosis_object, mean, standard_deviation, sum;
      mean = (this.getMean(data)).value;
      standard_deviation = (this.getStandardDeviation(data)).value;
      sum = _.reduce(data, (function(memo, datum) {
        return Math.pow(datum - mean, 4) + memo;
      }), 0);
      denom = data.length * Math.pow(standard_deviation, 4);
      kurtosis = sum / denom;
      return kurtosis_object = {
        'label': 'Kurtosis',
        'value': kurtosis
      };
    };

    return Statistics;

  })(BaseTool);

  if (typeof require === 'function' && typeof module === 'object' && typeof exports === 'object') {
    module.exports = Statistics;
  } else {
    window.Ubret['Statistics'] = Statistics;
  }

}).call(this);
// Generated by CoffeeScript 1.3.3
(function() {
  var BaseTool, SubjectViewer,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  try {
    BaseTool = require('./base_tool');
  } catch (error) {
    BaseTool = window.Ubret.BaseTool;
  }

  SubjectViewer = (function(_super) {

    __extends(SubjectViewer, _super);

    SubjectViewer.prototype.attributes = {
      currentSubject: {
        name: 'currentSubject',
        "default": 0,
        events: [
          {
            'selector': 'click .nav .prev',
            'callback': 'prevSubject',
            'action': 'change'
          }, {
            'selector': 'click .nav .next',
            'callback': 'nextSubject',
            'action': 'change'
          }
        ]
      }
    };

    SubjectViewer.prototype.template = "<% if @subject: %>\n  <% if @count > 1: %>\n    <div class=\"nav\">\n      <a class=\"back\">back</a>\n      <a class=\"next\">next</a>\n    </div>\n  <% end %>\n\n  <% if @subject.image: %>\n    <img src=\"<%- @subject.image %>\" />\n  <% end %>\n\n  <ul>\n    <li>id: <%- @subject.zooniverse_id %></li>\n    <% for key, value of @keys: %>\n      <li><%- key %>: <%- if typeof(@subject[value]) isnt 'string' then @format(@subject[value]) else @subject[value] %> <%- @labels[value] %></li>\n    <% end %>\n  </ul>\n<% end %>";

    function SubjectViewer(opts) {
      this.select = __bind(this.select, this);

      this.nextSubject = __bind(this.nextSubject, this);

      this.prevSubject = __bind(this.prevSubject, this);

      this.getCurrentSubject = __bind(this.getCurrentSubject, this);

      this.render = __bind(this.render, this);

      this.start = __bind(this.start, this);
      SubjectViewer.__super__.constructor.apply(this, arguments);
      this.format = this.format || d3.format(',.02f');
      this.start();
    }

    SubjectViewer.prototype.start = function() {
      return this.render();
    };

    SubjectViewer.prototype.render = function() {
      var compiled;
      compiled = _.template(this.template, {
        subject: this.getCurrentSubject(),
        keys: this.keys,
        count: this.data.length,
        format: this.format
      });
      return this.tool_view.html(compiled);
    };

    SubjectViewer.prototype.getCurrentSubject = function() {
      return this.data[this.count];
    };

    SubjectViewer.prototype.prevSubject = function(count) {
      this.count -= 1;
      if (this.count < 0) {
        this.count = this.data.length - 1;
      }
      return this.count;
    };

    SubjectViewer.prototype.nextSubject = function(count) {
      this.count += 1;
      if (this.count >= this.data.length) {
        this.count = 0;
      }
      return this.count;
    };

    SubjectViewer.prototype.validateCurrentSubject = function(currentSubject) {
      return console.log('noop');
    };

    SubjectViewer.prototype.select = function(itemId) {
      var subject, subjectIndex;
      subject = _.find(this.data, function(datum) {
        return datum.zooniverse_id === itemId;
      });
      subjectIndex = _.indexOf(this.data, subject);
      this.count = subjectIndex;
      return this.render();
    };

    return SubjectViewer;

  })(BaseTool);

  if (typeof require === 'function' && typeof module === 'object' && typeof exports === 'object') {
    module.exports = SubjectViewer;
  } else {
    window.Ubret['SubjectViewer'] = SubjectViewer;
  }

}).call(this);
// Generated by CoffeeScript 1.3.3
(function() {
  var BaseTool, Table,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  try {
    BaseTool = require('./base_tool');
  } catch (error) {
    BaseTool = window.Ubret.BaseTool;
  }

  Table = (function(_super) {

    __extends(Table, _super);

    Table.prototype.template = "<table id=<%- selector %>>\n  <thead></thead>\n  <tbody></tbody>\n</table>";

    function Table(opts) {
      this.changeData = __bind(this.changeData, this);

      this.highlightRow = __bind(this.highlightRow, this);

      this.selectColumn = __bind(this.selectColumn, this);

      this.toArray = __bind(this.toArray, this);

      this.createRows = __bind(this.createRows, this);

      this.createHeader = __bind(this.createHeader, this);

      this.selectTable = __bind(this.selectTable, this);

      this.start = __bind(this.start, this);
      Table.__super__.constructor.call(this, opts);
      this.start();
    }

    Table.prototype.start = function() {
      var compiled;
      compiled = _.template(this.template, {
        selector: this.selector
      });
      this.el.html(compiled);
      this.selectTable();
      this.createHeader();
      return this.createRows();
    };

    Table.prototype.selectTable = function() {
      this.thead = d3.select("" + this.selector + " thead");
      return this.tbody = d3.select("" + this.selector + " tbody");
    };

    Table.prototype.createHeader = function() {
      var _this = this;
      return this.thead.selectAll("th").data(this.keys).enter().append("th").on('click', function(d, i) {
        return _this.selectKey(d);
      }).attr('data-key', function(d) {
        return d;
      }).text(function(d) {
        return _this.formatKey(d);
      });
    };

    Table.prototype.createRows = function() {
      var tr,
        _this = this;
      this.tbody.selectAll('tr').remove();
      tr = this.tbody.selectAll('tr').data(this.data).enter().append('tr').sort(function(a, b) {
        if (a === null || b === null) {
          return 0;
        } else {
          return _this.compare(a[_this.selectedKey], b[_this.selectedKey]);
        }
      }).attr('data-id', function(d) {
        return d.id;
      }).on('click', function(d, i) {
        return _this.selectElement(d.id);
      });
      tr.selectAll('td').data(function(d) {
        return _this.toArray(d);
      }).enter().append('td').text(function(d) {
        return d;
      });
      if (this.selectedElement) {
        return this.highlightRow();
      }
    };

    Table.prototype.compare = function(a, b) {
      if (typeof a === 'string') {
        return a.localeCompare(b);
      } else {
        if (a < b) {
          return -1;
        } else {
          if (a > b) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };

    Table.prototype.toArray = function(data) {
      var key, ret, _i, _len, _ref;
      ret = new Array;
      _ref = this.keys;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        ret.push(data[key]);
      }
      return ret;
    };

    Table.prototype.formatKey = function(key) {
      return (key.replace(/_/g, " ")).replace(/(\b[a-z])/g, function(char) {
        return char.toUpperCase();
      });
    };

    Table.prototype.selectColumn = function(key) {
      return this.createRows(key);
    };

    Table.prototype.highlightRow = function() {
      return this.tbody.select("[data-id=" + this.selectedElement + "]").attr('class', 'selected');
    };

    Table.prototype.changeData = function(data) {
      this.data = data;
      return this.createRows();
    };

    return Table;

  })(BaseTool);

  if (typeof require === 'function' && typeof module === 'object' && typeof exports === 'object') {
    module.exports = Table;
  } else {
    window.Ubret['Table'] = Table;
  }

}).call(this);
